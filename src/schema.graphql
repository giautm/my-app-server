# import Post from "./generated/prisma.graphql"
# import Role from "./generated/prisma.graphql"

enum Operator {
  ALL,
  ONE,
}

directive @auth(
  requires: [Permission],
  opType: Operator = ONE,
  """
  If the user has this permission the directive
  will allow accessing with without check requires.
  """
  permissionAll: Permission = ADMINISTRATOR,
) on OBJECT | FIELD_DEFINITION

directive @relayID(
  type: String,
) on ARGUMENT_DEFINITION
  | FIELD_DEFINITION
  | INPUT_FIELD_DEFINITION

type Query {
  feed: [Post!]!
  drafts: [Post!]!
  post(id: ID!): Post
  me: User
}

input UpdateUserRoleInput {
  id: ID! @relayID(type:"User")
  roles: [ID!]! @relayID(type:"Role")
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createDraft(title: String!, text: String!): Post!
  publish(id: ID!): Post!
  deletePost(id: ID!): Post!

  updateUserRole(id: ID!, roles: [ID!]!): User! @auth(requires: [PERMISSION_ALL])
  updateUserGroup(id: ID!, groups: [ID!]!): User! @auth(requires: [PERMISSION_ALL])
  createRole(
    name: String!,
    description: String!,
  ): Role
  updateRole(
    id: ID!,
    name: String,
    description: String,
    permissions: [Permission!],
  ): Role
  deleteRole(id: ID!): Role
}

type Subscription {
  feedSubscription: PostSubscriptionPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  isTikier: Boolean!
  permissions: [Permission!]!
  posts: [Post!]!
}

enum Permission {
  ADMINISTRATOR
  """
  This permission allows the user to everything on this system.
  """
  PERMISSION_ALL

  """
  All permission on posts
  """
  POST_ALL
  """
  Edit a post
  """
  POST_EDIT
  """
  view a post
  """
  POST_VIEW
  """
  create a post
  """
  POST_CREATE
  """
  delete a post
  """
  POST_DELETE
}
